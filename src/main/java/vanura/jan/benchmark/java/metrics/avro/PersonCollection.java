/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package vanura.jan.benchmark.java.metrics.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PersonCollection extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3250682461610812200L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PersonCollection\",\"namespace\":\"vanura.jan.benchmark.java.metrics.avro\",\"fields\":[{\"name\":\"persons\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Person\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"index\",\"type\":\"int\"},{\"name\":\"guid\",\"type\":\"string\"},{\"name\":\"isActive\",\"type\":\"boolean\"},{\"name\":\"balance\",\"type\":\"string\"},{\"name\":\"picture\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"int\"},{\"name\":\"eyeColor\",\"type\":{\"type\":\"enum\",\"name\":\"EyeColor\",\"symbols\":[\"blue\",\"brown\",\"green\"]}},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"gender\",\"type\":{\"type\":\"enum\",\"name\":\"Gender\",\"symbols\":[\"male\",\"female\"]}},{\"name\":\"company\",\"type\":\"string\"},{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"phone\",\"type\":\"string\"},{\"name\":\"address\",\"type\":\"string\"},{\"name\":\"about\",\"type\":\"string\"},{\"name\":\"registered\",\"type\":\"string\"},{\"name\":\"latitude\",\"type\":\"float\"},{\"name\":\"longitude\",\"type\":\"float\"},{\"name\":\"tags\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"friends\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Friend\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"name\",\"type\":\"string\"}]}}},{\"name\":\"greeting\",\"type\":\"string\"},{\"name\":\"favoriteFruit\",\"type\":{\"type\":\"enum\",\"name\":\"Fruit\",\"symbols\":[\"apple\",\"banana\",\"strawberry\"]}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<vanura.jan.benchmark.java.metrics.avro.Person> persons;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PersonCollection() {}

  /**
   * All-args constructor.
   * @param persons The new value for persons
   */
  public PersonCollection(java.util.List<vanura.jan.benchmark.java.metrics.avro.Person> persons) {
    this.persons = persons;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return persons;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: persons = (java.util.List<vanura.jan.benchmark.java.metrics.avro.Person>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'persons' field.
   * @return The value of the 'persons' field.
   */
  public java.util.List<vanura.jan.benchmark.java.metrics.avro.Person> getPersons() {
    return persons;
  }

  /**
   * Sets the value of the 'persons' field.
   * @param value the value to set.
   */
  public void setPersons(java.util.List<vanura.jan.benchmark.java.metrics.avro.Person> value) {
    this.persons = value;
  }

  /**
   * Creates a new PersonCollection RecordBuilder.
   * @return A new PersonCollection RecordBuilder
   */
  public static vanura.jan.benchmark.java.metrics.avro.PersonCollection.Builder newBuilder() {
    return new vanura.jan.benchmark.java.metrics.avro.PersonCollection.Builder();
  }

  /**
   * Creates a new PersonCollection RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PersonCollection RecordBuilder
   */
  public static vanura.jan.benchmark.java.metrics.avro.PersonCollection.Builder newBuilder(vanura.jan.benchmark.java.metrics.avro.PersonCollection.Builder other) {
    return new vanura.jan.benchmark.java.metrics.avro.PersonCollection.Builder(other);
  }

  /**
   * Creates a new PersonCollection RecordBuilder by copying an existing PersonCollection instance.
   * @param other The existing instance to copy.
   * @return A new PersonCollection RecordBuilder
   */
  public static vanura.jan.benchmark.java.metrics.avro.PersonCollection.Builder newBuilder(vanura.jan.benchmark.java.metrics.avro.PersonCollection other) {
    return new vanura.jan.benchmark.java.metrics.avro.PersonCollection.Builder(other);
  }

  /**
   * RecordBuilder for PersonCollection instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PersonCollection>
    implements org.apache.avro.data.RecordBuilder<PersonCollection> {

    private java.util.List<vanura.jan.benchmark.java.metrics.avro.Person> persons;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(vanura.jan.benchmark.java.metrics.avro.PersonCollection.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.persons)) {
        this.persons = data().deepCopy(fields()[0].schema(), other.persons);
        fieldSetFlags()[0] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PersonCollection instance
     * @param other The existing instance to copy.
     */
    private Builder(vanura.jan.benchmark.java.metrics.avro.PersonCollection other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.persons)) {
        this.persons = data().deepCopy(fields()[0].schema(), other.persons);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'persons' field.
      * @return The value.
      */
    public java.util.List<vanura.jan.benchmark.java.metrics.avro.Person> getPersons() {
      return persons;
    }

    /**
      * Sets the value of the 'persons' field.
      * @param value The value of 'persons'.
      * @return This builder.
      */
    public vanura.jan.benchmark.java.metrics.avro.PersonCollection.Builder setPersons(java.util.List<vanura.jan.benchmark.java.metrics.avro.Person> value) {
      validate(fields()[0], value);
      this.persons = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'persons' field has been set.
      * @return True if the 'persons' field has been set, false otherwise.
      */
    public boolean hasPersons() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'persons' field.
      * @return This builder.
      */
    public vanura.jan.benchmark.java.metrics.avro.PersonCollection.Builder clearPersons() {
      persons = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public PersonCollection build() {
      try {
        PersonCollection record = new PersonCollection();
        record.persons = fieldSetFlags()[0] ? this.persons : (java.util.List<vanura.jan.benchmark.java.metrics.avro.Person>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
